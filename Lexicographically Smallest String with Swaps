def smallestStringWithSwaps(s, pairs):
    from collections import defaultdict
    
    def dfs(node, visited, adj, component):
        stack = [node]
        while stack:
            n = stack.pop()
            if n not in visited:
                visited.add(n)
                component.append(n)
                stack.extend(adj[n])
    
    n = len(s)
    adj = defaultdict(list)
    for a, b in pairs:
        adj[a].append(b)
        adj[b].append(a)
    
    visited = set()
    components = []
    
    for i in range(n):
        if i not in visited:
            component = []
            dfs(i, visited, adj, component)
            components.append(component)
    
    s = list(s)
    for component in components:
        indices = sorted(component)
        chars = sorted(s[i] for i in indices)
        for idx, char in zip(indices, chars):
            s[idx] = char
    
    return ''.join(s)

s = "dcab"
pairs = [[0, 3], [1, 2]]
print(smallestStringWithSwaps(s, pairs)) 
